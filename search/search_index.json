{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to github_canvas_grader","text":"<p>Python module and command line utility for scraping Github Actions results and uploading to Canvas as grades</p> <ul> <li>Free software: Apache Software License 2.0</li> <li>Documentation: https://johntfoster.github.io/github_canvas_grader</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#github_canvas_grader.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>github_canvas_grader/common.py</code> <pre><code>def hello_world():\n\"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/johntfoster/github-canvas-grader/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>Github Canvas Grader could always use more documentation, whether as part of the official Github Canvas Grader docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/johntfoster/github-canvas-grader/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up github-canvas-grader for local development.</p> <ol> <li> <p>Fork the github-canvas-grader repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/github-canvas-grader.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv github-canvas-grader\n$ cd github-canvas-grader/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 github-canvas-grader tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/johntfoster/github-canvas-grader/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"github_canvas_grader/","title":"github_canvas_grader module","text":"<p>grader</p> <p>Usage:   grader.py    grader.py  [(--env  )...]   grader.py  [--due ( )]   grader.py  [--due ( ) (--env  )...]   grader.py [-E]    grader.py [-T]  <p>Options:   -h --help      Show this screen.   --version      Show version.   -v --verbose   Show verbose output.   -e --env       Specify environment variables.   -d --due       Specify due date/time with (format YYYY-MM-DD HH:MM:SS TZ multiplier)   -E --encode    Encode a Google Client secret file   -T --trigger   Trigger a rerun of all assignment workflows</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.filter_repos","title":"<code>filter_repos(api, org, filter_string)</code>","text":"<p>Retrieve a list of repositories from a given organization that match a given filter string.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.filter_repos--parameters","title":"Parameters","text":"<p>api : GhApi     The Github API object. org : str     The organization name. filter_string : str     The string to filter the repository names by.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.filter_repos--returns","title":"Returns","text":"<p>list     A list of repository names that match the filter string.</p> Source code in <code>github_canvas_grader/github_canvas_grader.py</code> <pre><code>def filter_repos(api: GhApi, org: str, filter_string: str):\n\"\"\"\n    Retrieve a list of repositories from a given organization that match a given filter string.\n\n    Parameters\n    ----------\n    api : GhApi\n        The Github API object.\n    org : str\n        The organization name.\n    filter_string : str\n        The string to filter the repository names by.\n\n    Returns\n    -------\n    list\n        A list of repository names that match the filter string.\n    \"\"\"\n    repos = list()\n    for page in paged(api.repos.list_for_org, org=org):\n        for item in page:\n            if filter_string in item.get('name'):\n                repos.append(item['name'])\n\n    return repos\n</code></pre>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.get_assignment_id","title":"<code>get_assignment_id(course, assignment_name)</code>","text":"<p>Retrieve the assignment id of a given assignment name from a course.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.get_assignment_id--parameters","title":"Parameters","text":"<p>course : object     The course object from which to retrieve the assignment id. assignment_name : str     The name of the assignment to retrieve the id from.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.get_assignment_id--returns","title":"Returns","text":"<p>int     The id of the assignment with the given name.     None if no assignment with the given name is found.</p> Source code in <code>github_canvas_grader/github_canvas_grader.py</code> <pre><code>def get_assignment_id(course, assignment_name:str):\n\"\"\"\n    Retrieve the assignment id of a given assignment name from a course.\n\n    Parameters\n    ----------\n    course : object\n        The course object from which to retrieve the assignment id.\n    assignment_name : str\n        The name of the assignment to retrieve the id from.\n\n    Returns\n    -------\n    int\n        The id of the assignment with the given name.\n        None if no assignment with the given name is found.\n    \"\"\"\n    assignments = course.get_assignments()\n\n    for assignment in assignments:\n\n        if assignment.name == assignment_name:\n            return assignment.id\n\n    print(f\"No assignment id with corresponding name: {assignment_name}\")\n    return\n</code></pre>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.get_latest_workflow_commit_time_and_conclusion","title":"<code>get_latest_workflow_commit_time_and_conclusion(api, repo, workflow_filename='main.yml')</code>","text":"<p>Get the latest workflow commit time and conclusion from a given repository.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.get_latest_workflow_commit_time_and_conclusion--parameters","title":"Parameters","text":"<p>api : object     The GitHub API object. repo : str     The repository name. workflow_filename : str, optional     The workflow filename (default is 'main.yml').</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.get_latest_workflow_commit_time_and_conclusion--returns","title":"Returns","text":"<p>tuple     A tuple containing the latest workflow commit time and conclusion.</p> Source code in <code>github_canvas_grader/github_canvas_grader.py</code> <pre><code>def get_latest_workflow_commit_time_and_conclusion(api, repo: str,\n                                                   workflow_filename: str='main.yml'):\n\"\"\"\n    Get the latest workflow commit time and conclusion from a given repository.\n\n    Parameters\n    ----------\n    api : object\n        The GitHub API object.\n    repo : str\n        The repository name.\n    workflow_filename : str, optional\n        The workflow filename (default is 'main.yml').\n\n    Returns\n    -------\n    tuple\n        A tuple containing the latest workflow commit time and conclusion.\n    \"\"\"\n    run = get_latest_workflow_run(api, repo, workflow_filename)\n\n    if run is None:\n        return (None, None)\n    else:\n        return (run['head_commit']['timestamp'], run['conclusion'])\n</code></pre>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.get_latest_workflow_conclusion","title":"<code>get_latest_workflow_conclusion(api, repo, workflow_filename='main.yml')</code>","text":"<p>Get the latest workflow conclusion from a given repository.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.get_latest_workflow_conclusion--parameters","title":"Parameters","text":"<p>api : GitHub API     The GitHub API object. repo : str     The repository name. workflow_filename : str, optional     The workflow filename (default is 'main.yml').</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.get_latest_workflow_conclusion--returns","title":"Returns","text":"<p>str     The workflow conclusion. None     If no workflow runs are found.</p> Source code in <code>github_canvas_grader/github_canvas_grader.py</code> <pre><code>def get_latest_workflow_conclusion(api, repo: str, workflow_filename: str='main.yml'):\n\"\"\"\n    Get the latest workflow conclusion from a given repository.\n\n    Parameters\n    ----------\n    api : GitHub API\n        The GitHub API object.\n    repo : str\n        The repository name.\n    workflow_filename : str, optional\n        The workflow filename (default is 'main.yml').\n\n    Returns\n    -------\n    str\n        The workflow conclusion.\n    None\n        If no workflow runs are found.\n    \"\"\"\n    run = get_latest_workflow_run(api, repo, workflow_filename)\n\n    if run is None:\n        return None\n    else:\n        return run['conclusion']\n</code></pre>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.get_latest_workflow_run","title":"<code>get_latest_workflow_run(api, repo, workflow_filename='main.yml')</code>","text":"<p>Get the latest workflow run for a given repository and workflow filename.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.get_latest_workflow_run--parameters","title":"Parameters","text":"<p>api : GhApi     The Github API object. repo : str     The repository name. workflow_filename : str, optional     The workflow filename, by default 'main.yml'.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.get_latest_workflow_run--returns","title":"Returns","text":"<p>dict     The workflow run information. None     If no workflow runs are found.</p> Source code in <code>github_canvas_grader/github_canvas_grader.py</code> <pre><code>def get_latest_workflow_run(api: GhApi, repo: str, workflow_filename: str='main.yml'):\n\"\"\"\n    Get the latest workflow run for a given repository and workflow filename.\n\n    Parameters\n    ----------\n    api : GhApi\n        The Github API object.\n    repo : str\n        The repository name.\n    workflow_filename : str, optional\n        The workflow filename, by default 'main.yml'.\n\n    Returns\n    -------\n    dict\n        The workflow run information.\n    None\n        If no workflow runs are found.\n    \"\"\"\n    runs = api.actions.list_workflow_runs_for_repo(repo=repo)\n\n    if runs['total_count'] == 0:\n        return None\n    else:\n        for i, workflow_run in enumerate(runs['workflow_runs']):\n            if workflow_filename in workflow_run['name']:\n                return runs['workflow_runs'][i]\n</code></pre>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.google_creditial_decoder","title":"<code>google_creditial_decoder(base64_byte_string)</code>","text":"<p>Decode a base64 encoded byte string into a JSON object.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.google_creditial_decoder--parameters","title":"Parameters","text":"<p>base64_byte_string : str     A base64 encoded byte string.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.google_creditial_decoder--returns","title":"Returns","text":"<p>dict     A JSON object decoded from the base64 encoded byte string.</p> Source code in <code>github_canvas_grader/github_canvas_grader.py</code> <pre><code>def google_creditial_decoder(base64_byte_string:str):\n\"\"\"Decode a base64 encoded byte string into a JSON object.\n\n    Parameters\n    ----------\n    base64_byte_string : str\n        A base64 encoded byte string.\n\n    Returns\n    -------\n    dict\n        A JSON object decoded from the base64 encoded byte string.\n    \"\"\"\n    base64_str = base64.b64decode(base64_byte_string)\n    return json.loads(base64_str.decode('ascii'))\n</code></pre>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.google_creditial_encoder","title":"<code>google_creditial_encoder(json_file)</code>","text":"<p>Encode a Google credentials JSON file into a base64 string.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.google_creditial_encoder--parameters","title":"Parameters","text":"<p>json_file : str     Path to the JSON file containing the Google credentials.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.google_creditial_encoder--returns","title":"Returns","text":"<p>base64_bytes : str     The base64 encoded string of the Google credentials.</p> Source code in <code>github_canvas_grader/github_canvas_grader.py</code> <pre><code>def google_creditial_encoder(json_file):\n\"\"\"\n    Encode a Google credentials JSON file into a base64 string.\n\n    Parameters\n    ----------\n    json_file : str\n        Path to the JSON file containing the Google credentials.\n\n    Returns\n    -------\n    base64_bytes : str\n        The base64 encoded string of the Google credentials.\n    \"\"\"\n    with open(json_file) as f:\n        minified_json = json.dumps(json.load(f),\n                                   separators=(',', ':'))\n\n    base64_bytes = base64.b64encode(minified_json.encode('ascii'))\n    return base64_bytes.decode('ascii')\n</code></pre>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.read_username_map","title":"<code>read_username_map(creditials=None, classname=None)</code>","text":"<p>Read username map from either a csv file or a Google sheet.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.read_username_map--parameters","title":"Parameters","text":"<p>creditials : str, optional     Creditials for accessing the Google sheet. classname : str, optional     Name of the Google sheet.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.read_username_map--returns","title":"Returns","text":"<p>pandas.DataFrame     DataFrame containing the username map.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.read_username_map--raises","title":"Raises","text":"<p>ValueError     If an error occurs while reading the Google sheet.</p> Source code in <code>github_canvas_grader/github_canvas_grader.py</code> <pre><code>def read_username_map(creditials:str=None, classname:str=None):\n\"\"\"Read username map from either a csv file or a Google sheet.\n\n    Parameters\n    ----------\n    creditials : str, optional\n        Creditials for accessing the Google sheet.\n    classname : str, optional\n        Name of the Google sheet.\n\n    Returns\n    -------\n    pandas.DataFrame\n        DataFrame containing the username map.\n\n    Raises\n    ------\n    ValueError\n        If an error occurs while reading the Google sheet.\n    \"\"\"\n    if os.path.isfile('username_map.csv'):\n        df = pd.read_csv('username_map.csv')\n        df['EID'] = df['EID'].convert_dtypes('str').apply(lambda s: s.lower())\n        df['Github Username'] = df['Github Username'].convert_dtypes('str').apply(lambda s: s.lower())\n        return df.set_index(['Github Username'])\n    elif creditials is not None and classname is not None:\n        try:\n            return username_map_from_google_sheet(creditials, classname)\n        except ValueError:\n            print(\"Error reading Google Sheet\")\n    else:\n        print('You must specify a username map from a file name \"username_map.csv\" or Google sheet.')\n</code></pre>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.rerun_all_worflows_for_assignment","title":"<code>rerun_all_worflows_for_assignment(api, org, assignment_name, workflow_filename='main.yml')</code>","text":"<p>Rerun all workflows for a given assignment.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.rerun_all_worflows_for_assignment--parameters","title":"Parameters","text":"<p>api : object     Github API object. org : str     Name of the organization. assignment_name : str     Name of the assignment. workflow_filename : str, optional     Name of the workflow file, by default 'main.yml'.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.rerun_all_worflows_for_assignment--returns","title":"Returns","text":"<p>None</p> Source code in <code>github_canvas_grader/github_canvas_grader.py</code> <pre><code>def rerun_all_worflows_for_assignment(api, org, assignment_name:str,\n                                      workflow_filename: str='main.yml'):\n\"\"\"Rerun all workflows for a given assignment.\n\n    Parameters\n    ----------\n    api : object\n        Github API object.\n    org : str\n        Name of the organization.\n    assignment_name : str\n        Name of the assignment.\n    workflow_filename : str, optional\n        Name of the workflow file, by default 'main.yml'.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    repos = filter_repos(gh_api, org, assignment_name)\n\n    for repo in repos:\n        rerun_latest_workflow(api, repo, workflow_filename)\n\n    return\n</code></pre>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.rerun_latest_workflow","title":"<code>rerun_latest_workflow(api, repo, workflow_filename='main.yml')</code>","text":"<p>Re-run the latest workflow for a given repository.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.rerun_latest_workflow--parameters","title":"Parameters","text":"<p>api : object     The Github Actions API object. repo : str     The repository name. workflow_filename : str, optional     The name of the workflow file, by default 'main.yml'.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.rerun_latest_workflow--returns","title":"Returns","text":"<p>None     This function does not return anything.</p> Source code in <code>github_canvas_grader/github_canvas_grader.py</code> <pre><code>def rerun_latest_workflow(api, repo, workflow_filename: str='main.yml'):\n\"\"\"Re-run the latest workflow for a given repository.\n\n    Parameters\n    ----------\n    api : object\n        The Github Actions API object.\n    repo : str\n        The repository name.\n    workflow_filename : str, optional\n        The name of the workflow file, by default 'main.yml'.\n\n    Returns\n    -------\n    None\n        This function does not return anything.\n    \"\"\"\n    run_id = get_latest_workflow_run(api, repo, workflow_filename)['id']\n\n    try:\n        api.actions.re_run_workflow(repo=repo, run_id=run_id)\n    except:\n        pass\n\n    return\n</code></pre>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.score_multiplier","title":"<code>score_multiplier(args, commit_time, comparison_operator=&lt;function &lt;lambda&gt; at 0x7f83b7de8310&gt;)</code>","text":"<p>Calculate a score multiplier based on the commit time and due time.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>dict</code> <p>A dictionary of command line arguments.</p> required <code>commit_time</code> <code>str</code> <p>The commit time as a string.</p> required <code>comparison_operator</code> <code>function</code> <p>A comparison operator to use for the calculation. Defaults to lambda a,b: a &lt;= b.</p> <code>&lt;function &lt;lambda&gt; at 0x7f83b7de8310&gt;</code> <p>Returns:</p> Type Description <code>float</code> <p>The score multiplier.</p> Source code in <code>github_canvas_grader/github_canvas_grader.py</code> <pre><code>def score_multiplier(args,\n                     commit_time,\n                     comparison_operator=lambda a,b: a &lt;= b):\n\"\"\"Calculate a score multiplier based on the commit time and due time.\n\n    Args:\n        args (dict): A dictionary of command line arguments.\n        commit_time (str): The commit time as a string.\n        comparison_operator (function, optional): A comparison operator to use for the calculation. Defaults to lambda a,b: a &lt;= b.\n\n    Returns:\n        float: The score multiplier.\n    \"\"\"\n    if args['--due']:\n        commit_time = dateutil.parser.parse(commit_time)\n        date_time_string = f'{args[\"&lt;DATE&gt;\"]} {args[\"&lt;TIME&gt;\"]} {args[\"&lt;TIME_ZONE&gt;\"]}'\n        due_time = dateutil.parser.parse(date_time_string, tzinfos={\"CST\": gettz(\"America/Chicago\")})\n        rel_time = dateutil.relativedelta.relativedelta(commit_time, due_time)\n        if (comparison_operator(rel_time.hours, 0) and\n            comparison_operator(rel_time.minutes, 0) and\n            comparison_operator(rel_time.seconds, 0)):\n            return float(args['&lt;MULTIPLIER&gt;'])\n        else:\n            return 1.0\n    else:\n        return 1.0\n</code></pre>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.strip_github_username","title":"<code>strip_github_username(repo)</code>","text":"<p>strip_github_username(repo: str)</p> <p>Returns a lowercase string of the username from a given GitHub repository.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.strip_github_username--parameters","title":"Parameters","text":"<p>repo : str     The name of the GitHub repository.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.strip_github_username--returns","title":"Returns","text":"<p>str     The username from the given repository.</p> Source code in <code>github_canvas_grader/github_canvas_grader.py</code> <pre><code>def strip_github_username(repo: str):\n\"\"\"\n    strip_github_username(repo: str)\n\n    Returns a lowercase string of the username from a given GitHub repository.\n\n    Parameters\n    ----------\n    repo : str\n        The name of the GitHub repository.\n\n    Returns\n    -------\n    str\n        The username from the given repository.\n    \"\"\"\n    return '-'.join(repo.split('-')[1:]).lower()\n</code></pre>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.username_map_from_google_sheet","title":"<code>username_map_from_google_sheet(creditials, classname)</code>","text":"<p>Create a mapping of Github usernames to EIDs from a Google Sheet.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.username_map_from_google_sheet--parameters","title":"Parameters","text":"<p>creditials : str     Google credentials. classname : str     Name of the class.</p>"},{"location":"github_canvas_grader/#github_canvas_grader.github_canvas_grader.username_map_from_google_sheet--returns","title":"Returns","text":"<p>DataFrame     A mapping of Github usernames to EIDs.</p> Source code in <code>github_canvas_grader/github_canvas_grader.py</code> <pre><code>def username_map_from_google_sheet(creditials:str, classname:str):\n\"\"\"\n    Create a mapping of Github usernames to EIDs from a Google Sheet.\n\n    Parameters\n    ----------\n    creditials : str\n        Google credentials.\n    classname : str\n        Name of the class.\n\n    Returns\n    -------\n    DataFrame\n        A mapping of Github usernames to EIDs.\n    \"\"\"\n    creditials = google_creditial_decoder(creditials)\n\n    gc = gspread.service_account_from_dict(creditials)\n\n    sh1 = gc.open(f'{classname} Github Names').sheet1\n    df = pd.DataFrame(sh1.get_all_records())\n    df['Github Username'] = df['Github Username'].apply(lambda s: s.lower())\n    df['EID'] = df['EID'].apply(lambda s: s.lower())\n\n    return df.set_index(['Github Username'])\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install Github Canvas Grader, run this command in your terminal:</p> <pre><code>pip install github-canvas-grader\n</code></pre> <p>This is the preferred method to install Github Canvas Grader, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install Github Canvas Grader from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/johntfoster/github-canvas-grader\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use Github Canvas Grader in a project:</p> <pre><code>import github_canvas_grader\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"}]}